-- automatically generated by BNF Converter
module Main where


import System.IO 
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )
import System.FilePath.Posix

import LexLatte
import ParLatte
import SkelLatte
import PrintLatte
import AbsLatte
import TypeCheck
import ToInter
import ToAsm

import ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = if v > 1 then putStrLn s else return ()

runFile :: Verbosity -> ParseFun Program -> FilePath -> IO ()
runFile v p f = readFile f >>= run f v p

run :: FilePath -> Verbosity -> ParseFun Program -> String -> IO ()
run path v p s = let ts = myLLexer s in 
    let outPath = replaceExtension path ".s" in case p ts of
           Bad s    -> do hPutStr stderr "ERROR\n"
                          putStrLn "\nParse              Failed...\n"
                          putStrV v "Tokens:"
                          putStrV v $ show ts
                          putStrLn s
                          exitFailure
           Ok  tree -> do
                          showTree 2 tree 
                          (typesOk, funcs) <- checkTypes tree
                          if typesOk then let inter = translate tree funcs in do
                                fHandle <- openFile outPath WriteMode
                                hPutStr fHandle (compile inter)
                                hClose fHandle
                                hPutStr stderr "OK\n"
                                exitSuccess
                          else
                                exitFailure


showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    [] -> usage --hGetContents stdin >>= run 2 pProgram
    "-s":fs -> mapM_ (runFile 0 pProgram) fs
    fs -> mapM_ (runFile 2 pProgram) fs





